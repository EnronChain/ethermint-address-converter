import{stripHexPrefix as e,isValidChecksumAddress as r,toChecksumAddress as o}from"crypto-addr-codec";import{decode as t,fromWords as d,encode as n,toWords as c}from"bech32";const s={decoder:o=>{const t=e(o);if(!r(o,null)&&t!==t.toLowerCase()&&t!==t.toUpperCase())throw Error("Invalid address checksum");return Buffer.from(e(o),"hex")},encoder:e=>o(e.toString("hex"),null),name:"ETH"};function u(e){return r=>n(e,c(r))}const f=(e,r)=>{return{decoder:(o=r,e=>{const{prefix:r,words:n}=t(e);if(r!==o)throw Error("Unrecognised address format");return Buffer.from(d(n))}),encoder:u(r),name:e};var o},m=f("ETHERMINT","ethm"),a=e=>{let r=s.decoder(e);return m.encoder(r)},i=e=>{let r=m.decoder(e);return s.encoder(r)},l=f("EVMOS","evmos"),h=e=>{let r=s.decoder(e);return l.encoder(r)},p=e=>{let r=l.decoder(e);return s.encoder(r)};export{s as ETH,m as ETHERMINT,l as EVMOS,a as ethToEthermint,h as ethToEvmos,i as ethermintToEth,p as evmosToEth};
//# sourceMappingURL=converter.module.js.map
